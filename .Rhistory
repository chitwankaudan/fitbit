labs(x=expression(beta[Is.Break])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot11 <- ggplot(beta,aes(Min.Sed.Sq)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Min.Sed.Sq])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot12 <- ggplot(beta,aes(Intercept)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Intercept])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
grid.arrange(plot1,plot2,plot3,plot4,plot5,plot6,plot7,plot8,plot9,plot10,plot11,plot12, ncol=4)
ggplot(sm_merge[,-catcol], aes(x=Minutes.Sedentary, y=Number.of.Awakenings)) +
geom_point()  # potentially quadratic?
library(adaptMCMC)
library(numDeriv)
library(ggplot2)
sleep <- read.csv("data/sleepdf.csv")
head(sleep)
tail(sleep)
y <- sleep$Asleep
t <- sleep$Time.Offset
nlogh = function(theta){
alpha = theta[1]
beta = theta[2]
loglik = ( sum( y*(alpha+beta*t - log(1+exp(alpha+beta*t))) ) +
-sum( (1-y)*(log(1+exp(alpha+beta*t))) ) )
return (-1*loglik)
}
logh = function(theta){
return(-nlogh(theta))
}
h = function(theta){
return(exp(logh(theta)))
}
thetahat=optim(c(-10, 2), nlogh)$par
Sigmahat=solve(hessian(nlogh,thetahat))
m=10000
s=(2.4/sqrt(2))^2*Sigmahat #specify covariance matrix of the jumping distribution
out=MCMC(logh,n=m,init=thetahat,scale=s,adapt=T,acc.rate=.35)
theta = out$samples
prob_1AM <- data.frame(exp(theta$alpha + theta$beta*60) / (1+exp(theta$alpha + theta$beta*60)))
colnames(prob_1AM) <- c("Prob")
one <-ggplot(prob_1AM, aes(Prob)) +
geom_density(fill = "slateblue", alpha = 0.5) +
geom_vline(aes(xintercept = mean(Prob)),
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x="Prob. of Sleeping by 1:00AM") +
ggtitle('Sleeping by 1:00AM Density Plot') +
theme(plot.title = element_text(hjust = 0.5))
theta <- data.frame(theta)
colnames(theta) <- c('alpha', 'beta')
prob_1AM <- data.frame(exp(theta$alpha + theta$beta*60) / (1+exp(theta$alpha + theta$beta*60)))
colnames(prob_1AM) <- c("Prob")
one <-ggplot(prob_1AM, aes(Prob)) +
geom_density(fill = "slateblue", alpha = 0.5) +
geom_vline(aes(xintercept = mean(Prob)),
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x="Prob. of Sleeping by 1:00AM") +
ggtitle('Sleeping by 1:00AM Density Plot') +
theme(plot.title = element_text(hjust = 0.5))
prob_2AM <- data.frame(exp(theta$alpha + theta$beta*120) / (1+exp(theta$alpha + theta$beta*120)))
colnames(prob_2AM) <- c("Prob")
two <- ggplot(prob_2AM, aes(Prob)) +
geom_density(fill = "tomato2", alpha = 0.5) +
geom_vline(aes(xintercept = mean(Prob)),
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x="Prob. of Sleeping by 2:00AM") +
ggtitle('Sleeping by 2:00AM Density Plot') +
theme(plot.title = element_text(hjust = 0.5))
prob_3AM <- data.frame(exp(theta$alpha + theta$beta*180) / (1+exp(theta$alpha + theta$beta*180)))
colnames(prob_3AM) <- c("Prob")
three <- ggplot(prob_3AM, aes(Prob)) +
geom_density(fill = "tomato2", alpha = 0.5) +
geom_vline(aes(xintercept = mean(Prob)),
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x="Prob. of Sleeping by 3:00AM") +
ggtitle('Sleeping by 3:00AM Density Plot') +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(two,three,ncol=1)
grid.arrange(one,two,three,ncol=1)
wake <- read.csv("data/wakedf.csv")
head(wake)
tail(wake)
y <- wake$Asleep
t <- wake$Time.Offset
thetahat=optim(c(1, -2), nlogh)$par
Sigmahat=solve(hessian(nlogh,thetahat))
m=10000
s=(2.4/sqrt(2))^2*Sigmahat #specify covariance matrix of the jumping distribution
out=MCMC(logh,n=m,init=thetahat,scale=s,adapt=T,acc.rate=.35)
wake <- read.csv("data/wakedf.csv")
head(wake)
tail(wake)
y <- wake$Asleep
t <- wake$Time.Offset
thetahat=optim(c(1, -2), nlogh)$par
Sigmahat=solve(hessian(nlogh,thetahat))
m=10000
s=(2.4/sqrt(2))^2*Sigmahat #specify covariance matrix of the jumping distribution
out=MCMC(logh,n=m,init=thetahat,scale=s,adapt=T,acc.rate=.35)
theta = out$samples
1-rejectionRate(mcmc(theta))
effectiveSize(theta)
cumuplot(mcmc(theta,start=100,end=m,thin=10)) # check for convergence
plot(mcmc(theta)) #density plots
ggplot(wake, aes(x=Time.Offset, y=Asleep)) +
geom_point(color='slateblue2', alpha=0.01) +
scale_x_continuous(breaks=c(0,60,120,180,240,300,360),
labels=c('6:00AM',"7:00AM","8:00AM","9:00AM","10:00AM","11:00AM", "12:00AM")) +
geom_line(aes(x=Time.Offset, y=frequentist_logistic(Time.Offset)), color='black', linetype='dashed')+
ggtitle("Wake Time Model")+
theme(plot.title = element_text(hjust = 0.5))
theta <- data.frame(theta)
colnames(theta) <- c('alpha', 'beta')
a=ggplot(theta, aes(alpha)) +
geom_density(fill = "deepskyblue4", alpha = 0.5) +
geom_vline(xintercept = thetahat[1],
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x=expression(alpha)) +
ggtitle('Alpha Posterior For Wake Times') +
theme(plot.title = element_text(hjust = 0.5))
b=ggplot(theta, aes(beta)) +
geom_density(fill = "deepskyblue4", alpha = 0.5) +
geom_vline(xintercept = thetahat[2],
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x=expression(beta)) +
ggtitle('Beta Posterior For Wake Times') +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(a,b,ncol=2)
prob_8AM <- data.frame(1 - (exp(theta$alpha + theta$beta*120) / (1+exp(theta$alpha + theta$beta*120))))
colnames(prob_8AM) <- c("Prob")
eight<-ggplot(prob_8AM, aes(Prob)) +
geom_density(fill = "deepskyblue1", alpha = 0.5) +
geom_vline(aes(xintercept = mean(Prob)),
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x="Prob. of Waking by 8:00AM") +
ggtitle('Waking by 8:00AM Density Plot') +
theme(plot.title = element_text(hjust = 0.5))
prob_9AM <- data.frame(1 - (exp(theta$alpha + theta$beta*180) / (1+exp(theta$alpha + theta$beta*180))))
colnames(prob_9AM) <- c("Prob")
nine = ggplot(prob_9AM, aes(Prob)) +
geom_density(fill = "deepskyblue4", alpha = 0.5) +
geom_vline(aes(xintercept = mean(Prob)),
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x="Prob. of Waking by 9:00AM") +
ggtitle('Waking by 9:00AM Density Plot') +
theme(plot.title = element_text(hjust = 0.5))
prob_10AM <- data.frame(1 - (exp(theta$alpha + theta$beta*240) / (1+exp(theta$alpha + theta$beta*240))))
colnames(prob_10AM) <- c("Prob")
ten=ggplot(prob_10AM, aes(Prob)) +
geom_density(fill = "deepskyblue1", alpha = 0.5) +
geom_vline(aes(xintercept = mean(Prob)),
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x="Prob. of Waking by 10:00AM") +
ggtitle('Waking by 10:00AM Density Plot') +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(eight,nine,ten,ncol=2)
grid.arrange(eight,nine,ten,ncol=1)
sleep <- read.csv("data/sleepdf.csv")
head(sleep)
tail(sleep)
y <- sleep$Asleep
t <- sleep$Time.Offset
nlogh = function(theta){
alpha = theta[1]
beta = theta[2]
loglik = ( sum( y*(alpha+beta*t - log(1+exp(alpha+beta*t))) ) +
-sum( (1-y)*(log(1+exp(alpha+beta*t))) ) )
return (-1*loglik)
}
logh = function(theta){
return(-nlogh(theta))
}
h = function(theta){
return(exp(logh(theta)))
}
thetahat=optim(c(-10, 2), nlogh)$par
Sigmahat=solve(hessian(nlogh,thetahat))
m=10000
s=(2.4/sqrt(2))^2*Sigmahat #specify covariance matrix of the jumping distribution
out=MCMC(logh,n=m,init=thetahat,scale=s,adapt=T,acc.rate=.35)
theta = out$samples
theta <- data.frame(theta)
colnames(theta) <- c('alpha', 'beta')
prob_12AM <- data.frame(exp(theta$alpha + theta$beta*0) / (1+exp(theta$alpha + theta$beta*0)))
colnames(prob_12AM) <- c("Prob")
ggplot(prob_12AM, aes(Prob)) +
geom_density(fill = "slateblue", alpha = 0.5) +
geom_vline(aes(xintercept = mean(Prob)),
color="black", linetype="dashed", size=0.5) +
labs(y='Frequency', x="Prob. of Sleeping by 1:00AM") +
ggtitle('Sleeping by 1:00AM Density Plot') +
theme(plot.title = element_text(hjust = 0.5))
merged <- read.csv("data/mergeddf.csv")
dropcols = c(9,10,11,12,14,15,16,17)
freq_mod1 <- lm(Number.of.Awakenings ~ .,data=merged[,-dropcols])
summary(freq_mod1)
dropcols = c(1,2,3,8,9,10,11,12,14,15,16,17)
freq_mod5 <- lm(Number.of.Awakenings ~ .,data=merged[,-dropcols])
summary(freq_mod5)
car::vif(freq_mod5) #looks good!
sm_merge <- merged[,-dropcols]
rm(merged)
sm_merge$Min.Sed.Sq <- sm_merge$Minutes.Sedentary^2 #add quadratic term
sm_merge$Intercept <- 1
X=as.matrix(sm_merge[,-5])
y=sm_merge$Number.of.Awakenings
n = dim(X)[1]
p = dim(X)[2]-1
m = 10000
freq_mod6 <-  lm(Number.of.Awakenings ~., data=sm_merge[,-13])
summary(freq_mod6)
merged <- read.csv("data/mergeddf.csv")
merged$Quality <- merged$Minutes.Asleep/merged$Time.in.Bed
dropcols = c(9,10,11,12,13,14,15,16,17)
freq_mod1 <- lm(Quality ~ .,data=merged[,-dropcols])
summary(freq_mod1)
car::vif(freq_mod1) #drop Activity.Calories
dropcols = c(1,2,3,8,9,10,11,12,13,14,15,16,17)
freq_mod5 <-lm(Quality ~ .,data=merged[,-dropcols])
summary(freq_mod5)
car::vif(freq_mod5) #looks good!
sm_merge <- merged[,-dropcols]
rm(merged)
sm_merge$Intercept <- 1
X=as.matrix(sm_merge[,-11])
y=sm_merge$Quality
n = dim(X)[1]
p = dim(X)[2]-1
m = 10000
freq_mod6 <-  lm(Quality ~., data=sm_merge[,-12])
summary(freq_mod6)
sigma2=numeric(m)
sigma2[1]=summary(freq_mod6)$sigma^2
beta=matrix(0,nrow=m,ncol=p+1)
Sinv=solve(t(X)%*%X)
betahat=Sinv%*%t(X)%*%y
for(i in 1:m)
{
e=y-X%*%betahat
sigma2[i]=1/rgamma(1,(n-p-1)/2,t(e)%*%e/2)
beta[i,]=mvrnorm(1,betahat,sigma2[i]*Sinv)
}
colnames(X)
freq_mod6 <-  lm(Quality ~., data=sm_merge[,-12])
summary(freq_mod6)
merged <- read.csv("data/mergeddf.csv")
merged$Quality <- merged$Minutes.Asleep/merged$Time.in.Bed
dropcols = c(9,10,11,12,13,14,15,16,17)
freq_mod1 <- lm(Quality ~ .,data=merged[,-dropcols])
summary(freq_mod1)
car::vif(freq_mod1) #drop Activity.Calories
dropcols = c(8,9,10,11,12,13,14,15,16,17)
freq_mod2 <-lm(Quality ~ .,data=merged[,-dropcols])
summary(freq_mod2)
car::vif(freq_mod2) #drop Distance
dropcols = c(3,8,9,10,11,12,13,14,15,16,17)
freq_mod3 <- lm(Quality ~ .,data=merged[,-dropcols])
summary(freq_mod3)
car::vif(freq_mod3) #drop Calories burned
dropcols = c(1,3,8,9,10,11,12,13,14,15,16,17)
freq_mod4 <- lm(Quality ~ .,data=merged[,-dropcols])
summary(freq_mod4)
car::vif(freq_mod4) #drop Steps
dropcols = c(1,2,3,8,9,10,11,12,13,14,15,16,17)
freq_mod5 <-lm(Quality ~ .,data=merged[,-dropcols])
summary(freq_mod5)
car::vif(freq_mod5) #looks good!
sm_merge <- merged[,-dropcols]
sm_merge <- merged[,-dropcols]
rm(merged)
sm_merge$Min.Sed.Sq <- sm_merge$Minutes.Sedentary^2 #add quadratic term
sm_merge$Intercept <- 1
X=as.matrix(sm_merge[,-11])
y=sm_merge$Quality
n = dim(X)[1]
p = dim(X)[2]-1
m = 10000
freq_mod6 <-  lm(Quality ~., data=sm_merge[,-12])
summary(freq_mod6)
freq_mod6 <-  lm(Quality ~., data=sm_merge[,-13])
summary(freq_mod6)
freq_mod6 <-  lm(Quality ~., data=sm_merge[,-13])
summary(freq_mod6)
sigma2=numeric(m)
sigma2[1]=summary(freq_mod6)$sigma^2
beta=matrix(0,nrow=m,ncol=p+1)
Sinv=solve(t(X)%*%X)
betahat=Sinv%*%t(X)%*%y
for(i in 1:m)
{
e=y-X%*%betahat
sigma2[i]=1/rgamma(1,(n-p-1)/2,t(e)%*%e/2)
beta[i,]=mvrnorm(1,betahat,sigma2[i]*Sinv)
}
beta = as.data.frame(beta)
colnames(beta) <- colnames(X)
plot1 <- ggplot(beta,aes(Minutes.Sedentary)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Sedentary])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot2 <- ggplot(beta,aes(Minutes.Lightly.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Lightly.Active])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot3 <- ggplot(beta,aes(Minutes.Fairly.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Fairly.Active])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot4 <- ggplot(beta,aes(Minutes.Very.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Very.Active])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot5 <- ggplot(beta,aes(homework)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[homework])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot6 <- ggplot(beta,aes(project)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[project])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot7 <- ggplot(beta,aes(exam)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[exam])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot8 <- ggplot(beta,aes(Weekly.Assign.Num)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Weekly.Assign.Num])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot9 <- ggplot(beta,aes(Is.Weekend)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Is.Weekend])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot10 <- ggplot(beta,aes(Is.Break)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Is.Break])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot11 <- ggplot(beta,aes(Min.Sed.Sq)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Min.Sed.Sq])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot12 <- ggplot(beta,aes(Intercept)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Intercept])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
grid.arrange(plot1,plot2,plot3,plot4,plot5,plot6,plot7,plot8,plot9,plot10,plot11,plot12, ncol=4)
beta = as.data.frame(beta)
colnames(beta) <- colnames(X)
plot1 <- ggplot(beta,aes(Minutes.Sedentary)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Sedentary])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot2 <- ggplot(beta,aes(Minutes.Lightly.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Lightly.Active])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot3 <- ggplot(beta,aes(Minutes.Fairly.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Fairly.Active])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot4 <- ggplot(beta,aes(Minutes.Very.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Very.Active])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot5 <- ggplot(beta,aes(homework)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[homework])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot6 <- ggplot(beta,aes(project)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[project])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot7 <- ggplot(beta,aes(exam)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[exam])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot8 <- ggplot(beta,aes(Weekly.Assign.Num)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Weekly.Assign.Num])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot9 <- ggplot(beta,aes(Is.Weekend)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Is.Weekend])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot10 <- ggplot(beta,aes(Is.Break)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Is.Break])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot11 <- ggplot(beta,aes(Min.Sed.Sq)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Min.Sed.Sq])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot12 <- ggplot(beta,aes(Intercept)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Intercept])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
grid.arrange(plot1,plot2,plot3,plot4,plot5,plot6,plot7,plot8,plot9,plot10,plot11,plot12, ncol=4)
plot4 <- ggplot(beta,aes(Minutes.Very.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Very.Active])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5
plot6 <- ggplot(beta,aes(project)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[project])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
beta = as.data.frame(beta)
colnames(beta) <- colnames(X)
plot1 <- ggplot(beta,aes(Minutes.Sedentary)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Sedentary])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot2 <- ggplot(beta,aes(Minutes.Lightly.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Lightly.Active])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot3 <- ggplot(beta,aes(Minutes.Fairly.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Fairly.Active])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot4 <- ggplot(beta,aes(Minutes.Very.Active)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Minutes.Very.Active])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot5 <- ggplot(beta,aes(homework)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[homework])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot6 <- ggplot(beta,aes(project)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[project])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot7 <- ggplot(beta,aes(exam)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[exam])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot8 <- ggplot(beta,aes(Weekly.Assign.Num)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Weekly.Assign.Num])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot9 <- ggplot(beta,aes(Is.Weekend)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Is.Weekend])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot10 <- ggplot(beta,aes(Is.Break)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Is.Break])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot11 <- ggplot(beta,aes(Min.Sed.Sq)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Min.Sed.Sq])) +
theme(axis.text=element_text(size=5)) +
geom_vline(xintercept = 0,
color="red", size=0.5)
plot12 <- ggplot(beta,aes(Intercept)) +
geom_density(fill = "seagreen4", alpha = 0.5) +
labs(x=expression(beta[Intercept])) +
geom_vline(xintercept = 0,
color="red", size=0.5)
grid.arrange(plot1,plot2,plot3,plot4,plot5,plot6,plot7,plot8,plot9,plot10,plot11,plot12, ncol=4)
merged <- read.csv("data/mergeddf.csv")
